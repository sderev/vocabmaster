name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  lint:
    name: Lint and format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --frozen --dev

      - name: Run ruff linter
        run: uv run ruff check . --output-format=github

      - name: Run ruff formatter check
        run: uv run ruff format --check .

  test:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --frozen --dev

      - name: Run tests
        run: uv run pytest -v --tb=short --junitxml=pytest-results.xml
        env:
          OPENAI_API_KEY: test-key-for-ci

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: pytest-results.xml
          retention-days: 30

      - name: Run tests with coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        run: uv run pytest --cov=vocabmaster --cov-report=xml --cov-report=term --cov-report=html
        env:
          OPENAI_API_KEY: test-key-for-ci

      - name: Upload coverage reports to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage HTML report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov/
          retention-days: 30

  security:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen --dev

      - name: Run pip-audit
        run: |
          uv pip install pip-audit
          uv run pip-audit --desc --skip-editable || true

      - name: Upload pip-audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: pip-audit-*.json
          retention-days: 30
          if-no-files-found: ignore

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Build package
        run: uv build

      - name: Check package metadata
        run: |
          uv pip install twine
          uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 90

      - name: Generate build provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: dist/*

  install-test:
    name: Test installation (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install package from wheel
        run: uv pip install --system dist/*.whl

      - name: Test CLI entry point
        run: vocabmaster --help

      - name: Verify package version
        shell: bash
        run: |
          INSTALLED_VERSION=$(vocabmaster --version 2>&1 || echo "unknown")
          echo "Installed version: $INSTALLED_VERSION"

  all-checks-pass:
    name: All checks pass
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, install-test]
    if: always()
    steps:
      - name: Decide whether all checks passed
        uses: re-actors/alls-green@release/v1
        with:
          allowed-skips: security
          jobs: ${{ toJSON(needs) }}
